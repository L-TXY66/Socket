import socket
import threading
import sys
import time
import queue
import os

class Client:
    def __init__(self, username, connection, address):
        self.username = username
        self.connection = connection
        self.address = address
        self.kicked = False
        self.in_queue = True
        self.remaining_time = 100 # remaining time before AFK
        self.muted = False
        self.mute_duration = 0

class Channel:
    def __init__(self, name, port, capacity):
        self.name = name
        self.capacity = capacity
        # without int(), error:
        # server_socket.bind(("localhost", channel.port))
        # TypeError: 'str' object cannot be interpreted as an integer
        # Have checked with tutor, it could be changed.
        self.port = int(port) 
        self.queue = queue.Queue()
        self.clients = []

def parse_config(config_file: str) -> list:
    """
    Parses lines from a given configuration file and VALIDATE the format of each line. The 
    function validates each part and if valid returns a list of tuples where each tuple contains
    (channel_name, channel_port, channel_capacity). The function also ensures that there are no 
    duplicate channel names or ports. if not valid, exit with status code 1.
    Status: TODO
    Args:
        config_file (str): The path to the configuration file (e.g, config_01.txt).
    Returns:
        list: A list of tuples where each tuple contains:
        (channel_name, channel_port, and channel_capacity)
    Raises:
        SystemExit: If there is an error in the configuration file format.
    """
    # Channel names cannot contain a number or any special characters.
    # Each channel’s capacity must be at most five.
    try: 
        f = open(config_file, 'r')
        channel_list = []
        line = f.readline()
        # check unique channel names and ports
        channel_names = set()
        channel_ports = set()
        while line:
            # spliting each line into parts returns a list
            content = line.strip().split(" ")
            length = len(content)
            # check at least trhee parts in each line
            if length != 4:
                raise SystemExit(f"Invalid format in line: {line}")
            channel_name = content[1]
            channel_port = content[2]
            channel_capacity = content[3]
            # Channel names cannot contain a number or any special characters.
            if not channel_name.isalpha():
                raise SystemExit(f"The channel name contains a number or any special characters in line: {line}")
            # check port number and capacity must be numbers
            if not channel_port.isdigit() or not channel_capacity.isdigit():
                raise SystemExit(f"The port number/capacity is not digital in line: {line}")
            # check unique channel names and ports
            elif channel_name in channel_names or channel_port in channel_ports:
                raise SystemExit(f"Duplicate channel name or port in line: {line}")
            # Each channel's capacity must be at most five.
            elif int(channel_capacity) > 5 or int(channel_capacity) < 0:
                raise SystemExit(f"Capacity is not allowed in line: {line}")
            else:
                channel_names.add(channel_name)
                channel_ports.add(channel_port)
                channel = (channel_name, channel_port, channel_capacity)
                channel_list.append(channel)
            # loop all the file lines
            line = f.readline()
        f.close()
        return channel_list
    except SystemExit as e:
        print (e)
        sys.exit(1)

def get_channels_dictionary(parsed_lines) -> dict:
    """
    Creates a dictionary of Channel objects from parsed lines.
    Status: Given
    Args:
        parsed_lines (list): A list of tuples where each tuple contains:
        (channel_name, channel_port, and channel_capacity)
    Returns:
        dict: A dictionary of Channel objects where the key is the channel name.
    """
    channels = {}

    for channel_name, channel_port, channel_capacity in parsed_lines:
        channels[channel_name] = Channel(channel_name, channel_port, channel_capacity)

    return channels

def quit_client(client, channel) -> None:
    """
    Implement client quitting function
    Status: TODO
    """
    user = client.username
    quit_msg = f"[Server message ({time.strftime('%H:%M:%S')})] {user} has left the channel."
    # if client is in queue
    if client.in_queue:
        # Write your code here...
        # remove, close connection, and print quit message in the server.
        client.connection.send("/quit".encode())
        channel.queue = remove_item(channel.queue, client)
        client.connection.close()
        print(quit_msg)
        # broadcast queue update message to all the clients in the queue.
        # channel_queue = list(channel.queue.queue)
        channel_queue = list(channel.queue.queue)
        if len(channel_queue) == 0: 
            return
        for i in range(len(channel_queue)):
            try:
                queue_client = channel_queue[i]
                update_msg = f"[Server message ({time.strftime('%H:%M:%S')})] You are in the waiting queue and there are {i} user(s) ahead of you."
                queue_client.connection.send(update_msg.encode())
            except Exception as e:
                print(f"Failed to send message to client {i}: {e}")
    # if client is in channel
    else:
        # Write your code here...
        # remove client from the channel, close connection, and broadcast quit message to all clients.
        channel.clients.remove(client)
        client.connection.send("/quit".encode())
        client.connection.close()
        print(quit_msg)
        for clients in channel.clients:
            clients.connection.send(quit_msg.encode())
        pass

def send_client(client, channel, msg) -> None:
    """
    Implement file sending function, if args for /send are valid.
    Else print appropriate message and return.
    Status: TODO
    """
    # Write your code here...
    # if in queue, do nothing
    if client.in_queue:
        return
    else:
        # if muted, send mute message to the client
        if client.muted:
            n = client.mute_duration
            mute_msg = f"[Server message ({time.strftime('%H:%M:%S')})] You are still muted for {n} seconds."
            client.connection.send(mute_msg.encode())
        # if not muted, process the file sending
        else:
            # validate the command structure
            send_msg = msg.split(" ")
            if len(send_msg) != 3:
                error_msg = f"[Server message ({time.strftime('%H:%M:%S')})] Error: Invalid args."
                client.connection.send(error_msg.encode())
                return
            # check for target existance
            clients_name = []
            for clients in channel.clients:
                clients_name.append(clients.username)
            if send_msg[1] not in clients_name:
                error_msg = f"[Server message ({time.strftime('%H:%M:%S')})]  Error: {send_msg[1]} is not here."
                client.connection.send(error_msg.encode())
                return
            # check for file existence
            if not os.path.exists(send_msg[2]):
                error_msg = f"[Server message ({time.strftime('%H:%M:%S')})]  Error: {send_msg[2]} does not exist."
                client.connection.send(error_msg.encode())
                return
            # create a path for target client不知道对不对
            # If the file can be sent, it should be saved to the same directory as the target’s chat-client executable.
            # only suit for txt file
            with open(send_msg[2], "rb") as file:
                file_data = file.read()
            file_info = f"/sendfile {os.path.basename(send_msg[2])} ".encode() + file_data
            for clients in channel.clients:
                if clients.username == send_msg[1]:
                    clients.connection.send(file_info)
            # Success sending message
            success_msg = f"[Server message ({time.strftime('%H:%M:%S')})] You sent {send_msg[2]} to {send_msg[1]}."
            client.connection.send(success_msg.encode())
            # server’s stdout
            print(f"[Server message ({time.strftime('%H:%M:%S')})] {client.username} sent {send_msg[2]} to {send_msg[1]}.")
            
def list_clients(client, channels) -> None:
    """
    List all channels and their capacity
    Status: TODO
    """
    # Write your code here...
    list_msg = []
    for channel_name, channel in channels.items():
        client_number = len(channel.clients)
        capacity = channel.capacity
        in_queue = channel.queue.qsize()
        channel_info = f"[Channel] {channel_name} {channel.port} Capacity: {client_number}/ {capacity}, Queue: {in_queue}."
        list_msg.append(channel_info)
    list_info = '\n'.join(list_msg)
    client.connection.send(list_info.encode())

def whisper_client(client, channel, msg) -> None:
    """
    Implement whisper function, if args for /whisper are valid.
    Else print appropriate message and return.
    Status: TODO
    """
    # Write your code here...
    # if in queue, do nothing
    if client.in_queue:
        return
    else:
        # if muted, send mute message to the client
        if client.muted:
            n = client.mute_duration
            mute_msg = f"[Server message ({time.strftime('%H:%M:%S')})] You are still muted for {n} seconds."
            client.connection.send(mute_msg.encode())
        else:
            # validate the command structure
            parts = msg.split(" ")
            if len(parts) < 3:
                return
            username = parts[1]
            message = " ".join(parts[2:])
            # validate if the target user is in the channel
            target_client = None
            for c in channel.clients:
                if c.username == username:
                    target_client = c
            if target_client == None:
                error_msg = f"[Server message ({time.strftime('%H:%M:%S')})] {username} is not here."
                client.connection.send(error_msg.encode())
                return
            # if target user is in the channel, send the whisper message
            msg = f"[{client.username} whispers to you: ({time.strftime('%H:%M:%S')})] {message}"
            target_client.connection.send(msg.encode())
            # print whisper server message
            print(f"[{client.username} whispers to {username}: ({time.strftime('%H:%M:%S')})] {message}")

def switch_channel(client, channel, msg, channels) -> bool:
    """
    Implement channel switching function, if args for /switch are valid.
    Else print appropriate message and return.

    Returns: bool
    Status: TODO
    """
    # Write your code here...
    # validate the command structure
    parts = msg.split(" ")
    if len(parts) != 2:
        return False
    # check if the new channel exists
    new_channel_name = parts[1]
    if new_channel_name not in channels:
        error_msg = f"[Server message ({time.strftime('%H:%M:%S')})] {new_channel_name} does not exist."
        client.connection.send(error_msg.encode())
        return False
    # check if there is a client with the same username in the new channel
    new_channel = channels[new_channel_name]
    name = client.username
    for clients in new_channel.clients:
        if clients.username == name:
            error_msg = f"[Server message ({time.strftime('%H:%M:%S')})] {new_channel_name} already has a user with username {name}."
            client.connection.send(error_msg.encode())
            return False
    # if all checks are correct, and client in queue

    new_port = new_channel.port
    if client.in_queue:
        # remove client from current channel queue
        channel.queue = remove_item(channel.queue, client)
        # broadcast queue update message to all clients in the current channel
        channel_queue = list(channel.queue.queue)
        for i in range(len(channel_queue)):
            client = channel_queue[i]
            msg = f"[Server message ({time.strftime('%H:%M:%S')})] You are in the waiting queue and there are {i} user(s) ahead of you."
            client.connection.send(msg.encode())
        # tell client to connect to new channel and close connection???how
        msg = f"/switch {new_port}" 
        client.connection.send(msg.encode())
        print(f"[Server message ({time.strftime('%H:%M:%S')})] {client.username} has left the channel.")
        client.connection.close()
        return True
    # if all checks are correct, and client in channel
    else:
        # remove client from current channel
        channel.clients.remove(client)
        # tell client to connect to new channel and close connection
        msg = f"/switch {new_port}" 
        client.connection.send(msg.encode())
        print(f"[Server message ({time.strftime('%H:%M:%S')})] {client.username} has left the channel.")
        client.connection.close()
        for c in channel.clients:
            c.connection.send(f"[Server message ({time.strftime('%H:%M:%S')})] {client.username} has left the channel.".encode())
        return True

def broadcast_in_channel(client, channel, msg) -> None:
    """
    Broadcast a message to all clients in the channel.
    Status: TODO
    """
    # Write your code here...
    # if in queue, do nothing
    if client.in_queue: 
        return
    # if muted, send mute message to the client
    if client.muted:
        n = client.mute_duration
        mute_msg = f"[Server message ({time.strftime('%H:%M:%S')})] You are still muted for {n} seconds."
        client.connection.send(mute_msg.encode())
    # broadcast message to all clients in the channel
    msg = f"[{client.username} ({time.strftime('%H:%M:%S')})] {msg}"
    print(f"{msg}")
    for clients in channel.clients:
        clients.connection.send(msg.encode())
    

def client_handler(client, channel, channels) -> None:
    """
    Handles incoming messages from a client in a channel. Supports commands to quit, send, switch, whisper, and list channels. 
    Manages client's mute status and remaining time. Handles client disconnection and exceptions during message processing.
    Status: TODO (check the "# Write your code here..." block in Exception)
    Args:
        client (Client): The client to handle.
        channel (Channel): The channel in which the client is.
        channels (dict): A dictionary of all channels.
    """
    while True:
        if client.kicked:
            break
        try:
            msg = client.connection.recv(1024).decode()

            # check message for client commands
            if msg.startswith("/quit"):
                quit_client(client, channel)
                break
            elif msg.startswith("/send"):
                send_client(client, channel, msg)
            elif msg.startswith("/list"):
                list_clients(client, channels)
            elif msg.startswith("/whisper"):
                whisper_client(client, channel, msg)
            elif msg.startswith("/switch"):
                is_valid = switch_channel(client, channel, msg, channels)
                if is_valid:
                    break
                else:
                    continue
            # if not a command, broadcast message to all clients in the channel
            else:
                broadcast_in_channel(client, channel, msg) 
            # reset remaining time before AFK
            if not client.muted:
                client.remaining_time = 100
        except EOFError:
            continue
        except OSError:
            break
        except Exception as e:
            print(f"Error in client handler: {e}")
            # remove client from the channel, close connection
            if client in channel.clients:
                channel.clients.remove(client)
                client.connection.close()
            elif client in channel.queue.queue:
                channel.queue = remove_item(channel.queue, client)
                client.connection.close()
            # Write your code here...
            break

def check_duplicate_username(username, channel, conn) -> bool:
    """
    Check if a username is already in a channel or its queue.
    Status: TODO
    """
    # Write your code here...
    # if user name is already in channel
    for client in channel.clients:
        if client.username == username:
            error_msg = f"[Server message ({time.strftime('%H:%M:%S')})] Error: Username {username} already exist in this channel."
            conn.send(error_msg.encode())
            return False
    # if username is already in channel queue
    for client in list(channel.queue.queue):
        if client.usernaem == username:
            error_msg = f"[Server message ({time.strftime('%H:%M:%S')})] Error: Username {username} already exist in this channel."
            conn.send(error_msg.encode())
            return False
    return True

def position_client(channel, conn, username, new_client) -> None:
    """
    Place a client in a channel or queue based on the channel's capacity.
    Status: TODO
    """
    # Write your code here...
    if len(channel.clients) < int(channel.capacity) and channel.queue.empty():
        # put client in channel and reset remaining time before AFK
        channel.clients.append(new_client)
        new_client.in_queue = False
        new_client.remaining_time = 100
        print(f"[Server message ({time.strftime('%H:%M:%S')})] {username} has joined the {channel.name} channel.")
        msg = f"[Server message ({time.strftime('%H:%M:%S')})] {username} has joined the channel."
        for client in channel.clients:
            client.connection.send(msg.encode())
    else:
        # put client in queue
        channel.queue.put(new_client) # timeout = None
        new_client.in_queue = True
        msg = f"[Server message ({time.strftime('%H:%M:%S')})] Welcome to the {channel.name} waiting room, {username}."
        conn.send(msg.encode())
        channel_queue = list(channel.queue.queue)
        for i in range(len(channel_queue)):
            client = channel_queue[i]
            msg = f"[Server message ({time.strftime('%H:%M:%S')})] You are in the waiting queue and there are {i} user(s) ahead of you."
            client.connection.send(msg.encode())
        

def channel_handler(channel, channels) -> None:
    """
    Starts a chat server, manage channels, respective queues, and incoming clients.
    This initiates different threads for chanel queue processing and client handling.
    Status: Given
    Args:
        channel (Channel): The channel for which to start the server.
    Raises:
        EOFError: If there is an error in the client-server communication.
    """
    # Initialize server socket, bind, and listen
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(("localhost", channel.port))
    server_socket.listen(int(channel.capacity))

    # launch a thread to process client queue
    queue_thread = threading.Thread(target=process_queue, args=(channel,))
    queue_thread.start()

    while True:
        try:
            # accept a client connection
            conn, addr = server_socket.accept()
            username = conn.recv(1024).decode() 

            # check duplicate username in channel and channel's queue
            is_valid = check_duplicate_username(username, channel, conn)
            if not is_valid: continue

            welcome_msg = f"[Server message ({time.strftime('%H:%M:%S')})] Welcome to the {channel.name} channel, {username}."
            conn.send(welcome_msg.encode())
            time.sleep(0.1)
            new_client = Client(username, conn, addr)

            # position client in channel or queue
            position_client(channel, conn, username, new_client)

            # Create a client thread for each connected client, whether they are in the channel or queue
            client_thread = threading.Thread(target=client_handler, args=(new_client, channel, channels))
            client_thread.start()
        except EOFError:
            continue

def remove_item(q, item_to_remove) -> queue.Queue:
    """
    Remove item from queue
    Status: Given
    Args:
        q (queue.Queue): The queue to remove the item from.
        item_to_remove (Client): The item to remove from the queue.
    Returns:
        queue.Queue: The queue with the item removed.
    """
    new_q = queue.Queue()
    while not q.empty():
        current_item = q.get()
        if current_item != item_to_remove:
            new_q.put(current_item)

    return new_q

def process_queue(channel) -> None:
    """
    Processes the queue of clients for a channel in an infinite loop. If the channel is not full, 
    it dequeues a client, adds them to the channel, and updates their status. It then sends updates 
    to all clients in the channel and queue. The function handles EOFError exceptions and sleeps for 
    1 second between iterations.
    Status: TODO
    Args:
        channel (Channel): The channel whose queue to process.
    Returns:
        None
    """
    # Write your code here...
    while True:
        try:
            if not channel.queue.empty() and len(channel.clients) < int(channel.capacity):
                # Dequeue a client from the queue and add them to the channel
                client = channel.queue.get()
                channel.clients.append(client)
                client.in_queue = False
                # Send join message to all clients in the channel
                msg = f"[Server message ({time.strftime('%H:%M:%S')})] {client} has joined the channle."
                for c in channel.clients:
                    c.connection.send(msg.encode())
                # Update the queue messages for remaining clients in the queue
                channel_queue = list(channel.queue.queue)
                for i in range(len(channel_queue)):
                    client = channel_queue[i]
                    msg = f"[Server message ({time.strftime('%H:%M:%S')})] You are in the waiting queue and there are {i} user(s) ahead of you."
                    client.connection.send(msg.encode())
                    
                # Reset the remaining time to 100 before AFK
                client.remaining_time = 100
                time.sleep(1)
        except EOFError:
            continue

def kick_user(command, channels) -> None:
    """
    Implement /kick function
    Status: TODO
    Args:
        command (str): The command to kick a user from a channel.
        channels (dict): A dictionary of all channels.
    Returns:
        None
    """
    # validate command structure
    command_parts = command.split(" ")
    if len(command_parts) != 3:
        print(f"[Server message ({time.strftime('%H:%M:%S')})] Invalid command.")
        return
    channel_name = command_parts[1]
    username = command_parts[2]
    # check if the channel exists in the dictionary
    if channel_name not in channels:
        print(f"[Server message ({time.strftime('%H:%M:%S')})] {channel_name}] does not exist.")
        return
    # if channel exists, check if the user is in the channel
    channel = channels[channel_name]
    client_names = []
    for clients in channel.clients:
        client_names.append(clients.username)
    if username not in client_names:
        print(f"[Server message ({time.strftime('%H:%M:%S')})] {username} is not in {channel_name}.")
        return
    # if user is in the channel, kick the user
    print(f"[Server message ({time.strftime('%H:%M:%S')})] Kicked {username}.")
    msg = f"[Server message ({time.strftime('%H:%M:%S')})] {username} has left the channel."
    for clients in channel.clients:
        if clients.username == username:
            channel.clients.remove(clients)
            clients.connection.close()
        else:
            clients.connection.send(msg.encode())
    return

def empty(command, channels) -> None:
    """
    Implement /empty function
    Status: TODO
    Args:
        command (str): The command to empty a channel.
        channels (dict): A dictionary of all channels.
    """
    # Write your code here...
    # validate the command structure
    parts = command.split(" ")
    if len(parts) != 2:
        return
    # check if the channel exists in the server
    channel_name = parts[1]
    if channel_name not in channels:
        print(f"[Server message ({time.strftime('%H:%M:%S')})] {channel_name} does not exist.")
        return
    channel = channels[channel_name]
    # if the channel exists, close connections of all clients in the channel
    for client in channel.clients:
        client.connection.close()
    for client in list(channel.queue.queue):
        client.connection.close()
    print(f"[Server message ({time.strftime('%H:%M:%S')})] {channel_name} has been emptied.")

def mute_user(command, channels) -> None:
    """
    Implement /mute function
    Status: TODO
    Args:
        command (str): The command to mute a user in a channel.
        channels (dict): A dictionary of all channels.
    """
    # Write your code here...
    # validate the command structure
    parts = command.split(" ")
    if len(parts) != 4:
        return
    channel_name = parts[1]
    username = parts[2]
    duration_time = parts[3]
    # check if the mute time is valid
    if not duration_time.isdigit():
        print(f"[Server message ({time.strftime('%H:%M:%S')})] Invalid mute time.")
        return
    # check if the channel exists in the server
    if channel_name not in channels:
        return
    channel = channels[channel_name]
    # if user is not in the channel, print error message
    client = None
    for c in channel.clients:
        if username == c.username:
            client = c
    if client == None:
        print(f"[Server message ({time.strftime('%H:%M:%S')})] {username} is not here.")
        return
    # if the channel exists, check if the user is in the channel
    # if user is in the channel, mute it and send messages to all clients
    client.muted = True # mute it
    client.mute_duration = int(duration_time) # mute it
    print(f"[Server message ({time.strftime('%H:%M:%S')})] Muted {username} for {duration_time} seconds.")
    mute_msg = f"[Server message ({time.strftime('%H:%M:%S')})] You have been muted for {duration_time} seconds."
    client.connection.send(mute_msg.encode())
    for c in channel.clients:
        if c != client:
            mute_msg = f"[Server message ({time.strftime('%H:%M:%S')})] {username} has been muted for {duration_time} seconds."
            c.connection.send(mute_msg.encode())

def shutdown(channels) -> None:
    """
    Implement /shutdown function
    Status: TODO
    Args:
        channels (dict): A dictionary of all channels.
    """
    # close connections of all clients in all channels and exit the server
    for channel_name in channels:
        channel = channels[channel_name]
        # add client in queue 
        for client in channel.clients:
            # send msg here
            client.connection.close()
    # end of code insertion, keep the os._exit(0) as it is
    os._exit(0)

def server_commands(channels) -> None:
    """
    Implement commands to kick a user, empty a channel, mute a user, and shutdown the server.
    Each command has its own validation and error handling. 
    Status: Given
    Args:
        channels (dict): A dictionary of all channels.
    Returns:
        None
    """
    while True:
        try:
            command = input()
            if command.startswith('/kick'):
                kick_user(command, channels)
            elif command.startswith("/empty"):
                empty(command, channels)
            elif command.startswith("/mute"):
                mute_user(command, channels)
            elif command == "/shutdown":
                shutdown(channels)
            else:
                continue
        except EOFError:
            continue
        except Exception as e:
            print(f"{e}")
            sys.exit(1)

def check_inactive_clients(channels) -> None:
    """
    Continuously manages clients in all channels. Checks if a client is muted, in queue, or has run out of time. 
    If a client's time is up, they are removed from the channel and their connection is closed. 
    A server message is sent to all clients in the channel. The function also handles EOFError exceptions.
    Status: TODO
    Args:
        channels (dict): A dictionary of all channels.
    """
    # Write your code here...
    # parse through all the clients in all the channels
    for _, channel in channels.item():
        for client in channel.clients:
    # if client is muted or in queue, do nothing
            if client.muted or client.in_queue:
                return
    # remove client from the channel and close connection, print AFK message
            if client.remaining_time == 0:
                AFK_msg = f"[Server message ({time.strftime('%H:%M:%S')})] {client.username} went AFK."
                channel.clients.remove(client)
                client.connection.close()
                print(AFK_msg)
                for c in channel.clients:
                    c.connection.send(AFK_msg.encode())
                return
    # if client is not muted, decrement remaining time
            client.remaining_time -= 1
    time.sleep(0.99)

def handle_mute_durations(channels) -> None:
    """
    Continuously manages the mute status of clients in all channels. If a client's mute duration has expired, 
    their mute status is lifted. If a client is still muted, their mute duration is decremented. 
    The function sleeps for 0.99 seconds between iterations and handles EOFError exceptions.
    Status: Given
    Args:
        channels (dict): A dictionary of all channels.
    """
    while True:
        try:
            for channel_name in channels:
                channel = channels[channel_name]
                for client in channel.clients:
                    if client.mute_duration <= 0:
                        client.muted = False
                        client.mute_duration = 0
                    if client.muted and client.mute_duration > 0:
                        client.mute_duration -= 1
            time.sleep(0.99)
        except EOFError:
            continue

def main():
    try:
        if len(sys.argv) != 2:
            print("Usage: python3 chatserver.py configfile")
            sys.exit(1)

        config_file = sys.argv[1]

        # parsing and creating channels
        parsed_lines = parse_config(config_file)
        channels = get_channels_dictionary(parsed_lines)

        # creating individual threads to handle channels connections
        for _, channel in channels.items():
            thread = threading.Thread(target=channel_handler, args=(channel, channels))
            thread.start()

        server_commands_thread = threading.Thread(target=server_commands, args=(channels,))
        server_commands_thread.start()

        inactive_clients_thread = threading.Thread(target=check_inactive_clients, args=(channels,))
        inactive_clients_thread.start()

        mute_duration_thread = threading.Thread(target=handle_mute_durations, args=(channels,))
        mute_duration_thread.start()
    except KeyboardInterrupt:
        print("Ctrl + C Pressed. Exiting...")
        os._exit(0)


if __name__ == "__main__":
    main()
